%{
open Tiger
%}

%token <string> ID
%token <int> Int
%token <float> Float
%token <string> StringLiteral
%token <string> Comment

%token EQUAL LESS LESSEQUAL GREATER GREATEREQUAL ASSIGN PLUS MINUS DIVIDE MULTIPLY EXPONENT AND OR
%token INT ARRAY TYPE IF THEN ELSE FOR TO DO WHILE FUNCTION LET IN NIL VAR OF END
%token LBRACKET RBRACKET LPAREN RPAREN PERIOD COLON SEMICOLON COMMA
%token EOF

%start start
%type <Tiger.Program> start   

%%   

start:   
    LET statementList END EOF { 
                                 printfn "BRODY HERE"
                                 printfn "BRODY HERE"

                                 Tiger.Let($2) }

statementList: 
    |                     { [] }
	| special           {
                            printfn "SPECIAL: %A" $1
//                            [ Tiger.Special("foo") ] 
                            [ Tiger.Special($1) ] 
                        }
    | Int               { 
                            printfn "BRODY HERE"
                            [ Tiger.Number(4) ] }
    | value               { 
                            printfn "BRODY HERE"
                            [ Tiger.Number(4) ] }
    | VAR ID ASSIGN value { [ Tiger.Var($2, $4) ] }
special: 
    | Float {
                printfn "special inner: %A" $1
                
                Tiger.Float($1)
                // $1
                // or: ast.Float($1)?
                // System.Double.Parse($1)
                // 4.55
             }
value:   
    | INT                   { 5 }
                              // System.Int32.Parse(Int($1).ToString()) }   
 
%%