%{
open Tiger
%}

%token <string> ID
%token <int> INT
%token <float> Float
%token <string> StringLiteral
%token <string> Comment

%token EQUAL LESS LESSEQUAL GREATER GREATEREQUAL ASSIGN PLUS MINUS DIVIDE MULTIPLY EXPONENT AND OR
%token INT ARRAY TYPE IF THEN ELSE FOR TO DO WHILE FUNCTION LET IN NIL VAR OF END
%token LBRACKET RBRACKET LPAREN RPAREN PERIOD COLON SEMICOLON COMMA
%token EOF

%start start
%type <Tiger.Program> start   

%%   

start:   
    LET statementList END EOF { 
                                 printfn "LET: %A" $2

                                 Tiger.Let($2) }

statementList: 
    |                     { [] }
	| special           {
                            printfn "SPECIAL: %A" $1
                            [ Tiger.Special($1) ] 
                        }
//    | Int               { 
//                            printfn "Int: %A" $1
//                           [ Tiger.Number($1) ]                        
//                        }
    | VAR ID ASSIGN value { 
                            printfn "Var: id: %A value: %A" $2 $4
                            [ Tiger.Var($2, $4) ] 
                          }
    | value PLUS value { 
                     printfn "Plus: %A + %A" $1 $3
                     [ Tiger.MathOp($1, Tiger.Op.Plus, $3) ] 
                   }
special: 
    | Float {
                printfn "Float: %A" $1
                
                Tiger.Float($1)
             }
value:   
    | INT                   { 5 }
                              // System.Int32.Parse(Int($1).ToString()) }   
 
%%