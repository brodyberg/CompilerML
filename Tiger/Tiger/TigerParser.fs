// Implementation file for parser generated by fsyacc
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "Tiger.fsp"

open Tiger // maybe we open this only for when we invoke the tokenizer
		   // with an actual match? so, like, at that late point, we have
		   // access to the AST built within Tiger.fs?
		   // code here goes into the top of TigerParser.fs(!)

# 12 "TigerParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | LBracket
  | RBracket
  | LParen
  | RParen
  | Period
  | Colon
  | SemiColon
  | Comma
  | INT
  | ARRAY
  | TYPE
  | IF
  | THEN
  | ELSE
  | FOR
  | TO
  | DO
  | WHILE
  | FUNCTION
  | LET
  | IN
  | NIL
  | VAR
  | OF
  | END
  | Equal
  | Less
  | LessEqual
  | Greater
  | GreaterEqual
  | Assign
  | Plus
  | Minus
  | Divide
  | Multiply
  | Exponent
  | And
  | Or
  | Comment of (string)
  | StringLiteral of (string)
  | Float of (float)
  | Int of (int)
  | ID of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_LBracket
    | TOKEN_RBracket
    | TOKEN_LParen
    | TOKEN_RParen
    | TOKEN_Period
    | TOKEN_Colon
    | TOKEN_SemiColon
    | TOKEN_Comma
    | TOKEN_INT
    | TOKEN_ARRAY
    | TOKEN_TYPE
    | TOKEN_IF
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_FOR
    | TOKEN_TO
    | TOKEN_DO
    | TOKEN_WHILE
    | TOKEN_FUNCTION
    | TOKEN_LET
    | TOKEN_IN
    | TOKEN_NIL
    | TOKEN_VAR
    | TOKEN_OF
    | TOKEN_END
    | TOKEN_Equal
    | TOKEN_Less
    | TOKEN_LessEqual
    | TOKEN_Greater
    | TOKEN_GreaterEqual
    | TOKEN_Assign
    | TOKEN_Plus
    | TOKEN_Minus
    | TOKEN_Divide
    | TOKEN_Multiply
    | TOKEN_Exponent
    | TOKEN_And
    | TOKEN_Or
    | TOKEN_Comment
    | TOKEN_StringLiteral
    | TOKEN_Float
    | TOKEN_Int
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start

// This function maps tokens to integers indexes
let tagOfToken (t:token) = 
  match t with
  | LBracket  -> 0 
  | RBracket  -> 1 
  | LParen  -> 2 
  | RParen  -> 3 
  | Period  -> 4 
  | Colon  -> 5 
  | SemiColon  -> 6 
  | Comma  -> 7 
  | INT  -> 8 
  | ARRAY  -> 9 
  | TYPE  -> 10 
  | IF  -> 11 
  | THEN  -> 12 
  | ELSE  -> 13 
  | FOR  -> 14 
  | TO  -> 15 
  | DO  -> 16 
  | WHILE  -> 17 
  | FUNCTION  -> 18 
  | LET  -> 19 
  | IN  -> 20 
  | NIL  -> 21 
  | VAR  -> 22 
  | OF  -> 23 
  | END  -> 24 
  | Equal  -> 25 
  | Less  -> 26 
  | LessEqual  -> 27 
  | Greater  -> 28 
  | GreaterEqual  -> 29 
  | Assign  -> 30 
  | Plus  -> 31 
  | Minus  -> 32 
  | Divide  -> 33 
  | Multiply  -> 34 
  | Exponent  -> 35 
  | And  -> 36 
  | Or  -> 37 
  | Comment _ -> 38 
  | StringLiteral _ -> 39 
  | Float _ -> 40 
  | Int _ -> 41 
  | ID _ -> 42 

// This function maps integers indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_LBracket 
  | 1 -> TOKEN_RBracket 
  | 2 -> TOKEN_LParen 
  | 3 -> TOKEN_RParen 
  | 4 -> TOKEN_Period 
  | 5 -> TOKEN_Colon 
  | 6 -> TOKEN_SemiColon 
  | 7 -> TOKEN_Comma 
  | 8 -> TOKEN_INT 
  | 9 -> TOKEN_ARRAY 
  | 10 -> TOKEN_TYPE 
  | 11 -> TOKEN_IF 
  | 12 -> TOKEN_THEN 
  | 13 -> TOKEN_ELSE 
  | 14 -> TOKEN_FOR 
  | 15 -> TOKEN_TO 
  | 16 -> TOKEN_DO 
  | 17 -> TOKEN_WHILE 
  | 18 -> TOKEN_FUNCTION 
  | 19 -> TOKEN_LET 
  | 20 -> TOKEN_IN 
  | 21 -> TOKEN_NIL 
  | 22 -> TOKEN_VAR 
  | 23 -> TOKEN_OF 
  | 24 -> TOKEN_END 
  | 25 -> TOKEN_Equal 
  | 26 -> TOKEN_Less 
  | 27 -> TOKEN_LessEqual 
  | 28 -> TOKEN_Greater 
  | 29 -> TOKEN_GreaterEqual 
  | 30 -> TOKEN_Assign 
  | 31 -> TOKEN_Plus 
  | 32 -> TOKEN_Minus 
  | 33 -> TOKEN_Divide 
  | 34 -> TOKEN_Multiply 
  | 35 -> TOKEN_Exponent 
  | 36 -> TOKEN_And 
  | 37 -> TOKEN_Or 
  | 38 -> TOKEN_Comment 
  | 39 -> TOKEN_StringLiteral 
  | 40 -> TOKEN_Float 
  | 41 -> TOKEN_Int 
  | 42 -> TOKEN_ID 
  | 45 -> TOKEN_end_of_input
  | 43 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 45 
let _fsyacc_tagOfErrorTerminal = 43

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | LBracket  -> "LBracket" 
  | RBracket  -> "RBracket" 
  | LParen  -> "LParen" 
  | RParen  -> "RParen" 
  | Period  -> "Period" 
  | Colon  -> "Colon" 
  | SemiColon  -> "SemiColon" 
  | Comma  -> "Comma" 
  | INT  -> "INT" 
  | ARRAY  -> "ARRAY" 
  | TYPE  -> "TYPE" 
  | IF  -> "IF" 
  | THEN  -> "THEN" 
  | ELSE  -> "ELSE" 
  | FOR  -> "FOR" 
  | TO  -> "TO" 
  | DO  -> "DO" 
  | WHILE  -> "WHILE" 
  | FUNCTION  -> "FUNCTION" 
  | LET  -> "LET" 
  | IN  -> "IN" 
  | NIL  -> "NIL" 
  | VAR  -> "VAR" 
  | OF  -> "OF" 
  | END  -> "END" 
  | Equal  -> "Equal" 
  | Less  -> "Less" 
  | LessEqual  -> "LessEqual" 
  | Greater  -> "Greater" 
  | GreaterEqual  -> "GreaterEqual" 
  | Assign  -> "Assign" 
  | Plus  -> "Plus" 
  | Minus  -> "Minus" 
  | Divide  -> "Divide" 
  | Multiply  -> "Multiply" 
  | Exponent  -> "Exponent" 
  | And  -> "And" 
  | Or  -> "Or" 
  | Comment _ -> "Comment" 
  | StringLiteral _ -> "StringLiteral" 
  | Float _ -> "Float" 
  | Int _ -> "Int" 
  | ID _ -> "ID" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | LBracket  -> (null : System.Object) 
  | RBracket  -> (null : System.Object) 
  | LParen  -> (null : System.Object) 
  | RParen  -> (null : System.Object) 
  | Period  -> (null : System.Object) 
  | Colon  -> (null : System.Object) 
  | SemiColon  -> (null : System.Object) 
  | Comma  -> (null : System.Object) 
  | INT  -> (null : System.Object) 
  | ARRAY  -> (null : System.Object) 
  | TYPE  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | FOR  -> (null : System.Object) 
  | TO  -> (null : System.Object) 
  | DO  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | FUNCTION  -> (null : System.Object) 
  | LET  -> (null : System.Object) 
  | IN  -> (null : System.Object) 
  | NIL  -> (null : System.Object) 
  | VAR  -> (null : System.Object) 
  | OF  -> (null : System.Object) 
  | END  -> (null : System.Object) 
  | Equal  -> (null : System.Object) 
  | Less  -> (null : System.Object) 
  | LessEqual  -> (null : System.Object) 
  | Greater  -> (null : System.Object) 
  | GreaterEqual  -> (null : System.Object) 
  | Assign  -> (null : System.Object) 
  | Plus  -> (null : System.Object) 
  | Minus  -> (null : System.Object) 
  | Divide  -> (null : System.Object) 
  | Multiply  -> (null : System.Object) 
  | Exponent  -> (null : System.Object) 
  | And  -> (null : System.Object) 
  | Or  -> (null : System.Object) 
  | Comment _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | StringLiteral _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | Float _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | Int _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; |]
let _fsyacc_action_rows = 3
let _fsyacc_actionTableElements = [|1us; 32768us; 19us; 2us; 0us; 49152us; 0us; 16385us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 2us; 3us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 16385us; |]
let _fsyacc_reductions ()  =    [| 
# 321 "TigerParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 330 "TigerParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "Tiger.fsp"
                                                            
                   )
# 58 "Tiger.fsp"
                 : string));
|]
# 341 "TigerParser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 46;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : string =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
