// Implementation file for parser generated by fsyacc
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "../../../Tiger/Tiger.fsp"

open Tiger // maybe we open this only for when we invoke the tokenizer
		   // with an actual match? so, like, at that late point, we have
		   // access to the AST built within Tiger.fs?
		   // code here goes into the top of TigerParser.fs(!)

# 12 "TigerParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | NIL
  | FUNCTION
  | LET
  | IN
  | IF
  | THEN
  | ELSE
  | FOR
  | TO
  | DO
  | WHILE
  | INT
  | ARRAY
  | TYPE
  | EQ
  | LESS
  | GREATER
  | LESSEQUAL
  | GREATEREQUAL
  | PLUS
  | MINUS
  | AND
  | OR
  | SET
  | LBRACKET
  | RBRACKET
  | LPAREN
  | RPAREN
  | COMMA
  | PERIOD
  | COLON
  | SEMICOLON
  | COMMENTSTART
  | COMMENTEND
  | ID of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_NIL
    | TOKEN_FUNCTION
    | TOKEN_LET
    | TOKEN_IN
    | TOKEN_IF
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_FOR
    | TOKEN_TO
    | TOKEN_DO
    | TOKEN_WHILE
    | TOKEN_INT
    | TOKEN_ARRAY
    | TOKEN_TYPE
    | TOKEN_EQ
    | TOKEN_LESS
    | TOKEN_GREATER
    | TOKEN_LESSEQUAL
    | TOKEN_GREATEREQUAL
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_SET
    | TOKEN_LBRACKET
    | TOKEN_RBRACKET
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_COMMA
    | TOKEN_PERIOD
    | TOKEN_COLON
    | TOKEN_SEMICOLON
    | TOKEN_COMMENTSTART
    | TOKEN_COMMENTEND
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start

// This function maps tokens to integers indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | NIL  -> 1 
  | FUNCTION  -> 2 
  | LET  -> 3 
  | IN  -> 4 
  | IF  -> 5 
  | THEN  -> 6 
  | ELSE  -> 7 
  | FOR  -> 8 
  | TO  -> 9 
  | DO  -> 10 
  | WHILE  -> 11 
  | INT  -> 12 
  | ARRAY  -> 13 
  | TYPE  -> 14 
  | EQ  -> 15 
  | LESS  -> 16 
  | GREATER  -> 17 
  | LESSEQUAL  -> 18 
  | GREATEREQUAL  -> 19 
  | PLUS  -> 20 
  | MINUS  -> 21 
  | AND  -> 22 
  | OR  -> 23 
  | SET  -> 24 
  | LBRACKET  -> 25 
  | RBRACKET  -> 26 
  | LPAREN  -> 27 
  | RPAREN  -> 28 
  | COMMA  -> 29 
  | PERIOD  -> 30 
  | COLON  -> 31 
  | SEMICOLON  -> 32 
  | COMMENTSTART  -> 33 
  | COMMENTEND  -> 34 
  | ID _ -> 35 

// This function maps integers indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_NIL 
  | 2 -> TOKEN_FUNCTION 
  | 3 -> TOKEN_LET 
  | 4 -> TOKEN_IN 
  | 5 -> TOKEN_IF 
  | 6 -> TOKEN_THEN 
  | 7 -> TOKEN_ELSE 
  | 8 -> TOKEN_FOR 
  | 9 -> TOKEN_TO 
  | 10 -> TOKEN_DO 
  | 11 -> TOKEN_WHILE 
  | 12 -> TOKEN_INT 
  | 13 -> TOKEN_ARRAY 
  | 14 -> TOKEN_TYPE 
  | 15 -> TOKEN_EQ 
  | 16 -> TOKEN_LESS 
  | 17 -> TOKEN_GREATER 
  | 18 -> TOKEN_LESSEQUAL 
  | 19 -> TOKEN_GREATEREQUAL 
  | 20 -> TOKEN_PLUS 
  | 21 -> TOKEN_MINUS 
  | 22 -> TOKEN_AND 
  | 23 -> TOKEN_OR 
  | 24 -> TOKEN_SET 
  | 25 -> TOKEN_LBRACKET 
  | 26 -> TOKEN_RBRACKET 
  | 27 -> TOKEN_LPAREN 
  | 28 -> TOKEN_RPAREN 
  | 29 -> TOKEN_COMMA 
  | 30 -> TOKEN_PERIOD 
  | 31 -> TOKEN_COLON 
  | 32 -> TOKEN_SEMICOLON 
  | 33 -> TOKEN_COMMENTSTART 
  | 34 -> TOKEN_COMMENTEND 
  | 35 -> TOKEN_ID 
  | 38 -> TOKEN_end_of_input
  | 36 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 38 
let _fsyacc_tagOfErrorTerminal = 36

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | NIL  -> "NIL" 
  | FUNCTION  -> "FUNCTION" 
  | LET  -> "LET" 
  | IN  -> "IN" 
  | IF  -> "IF" 
  | THEN  -> "THEN" 
  | ELSE  -> "ELSE" 
  | FOR  -> "FOR" 
  | TO  -> "TO" 
  | DO  -> "DO" 
  | WHILE  -> "WHILE" 
  | INT  -> "INT" 
  | ARRAY  -> "ARRAY" 
  | TYPE  -> "TYPE" 
  | EQ  -> "EQ" 
  | LESS  -> "LESS" 
  | GREATER  -> "GREATER" 
  | LESSEQUAL  -> "LESSEQUAL" 
  | GREATEREQUAL  -> "GREATEREQUAL" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | SET  -> "SET" 
  | LBRACKET  -> "LBRACKET" 
  | RBRACKET  -> "RBRACKET" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | COMMA  -> "COMMA" 
  | PERIOD  -> "PERIOD" 
  | COLON  -> "COLON" 
  | SEMICOLON  -> "SEMICOLON" 
  | COMMENTSTART  -> "COMMENTSTART" 
  | COMMENTEND  -> "COMMENTEND" 
  | ID _ -> "ID" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | NIL  -> (null : System.Object) 
  | FUNCTION  -> (null : System.Object) 
  | LET  -> (null : System.Object) 
  | IN  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | FOR  -> (null : System.Object) 
  | TO  -> (null : System.Object) 
  | DO  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | INT  -> (null : System.Object) 
  | ARRAY  -> (null : System.Object) 
  | TYPE  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | LESS  -> (null : System.Object) 
  | GREATER  -> (null : System.Object) 
  | LESSEQUAL  -> (null : System.Object) 
  | GREATEREQUAL  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | SET  -> (null : System.Object) 
  | LBRACKET  -> (null : System.Object) 
  | RBRACKET  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | PERIOD  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | COMMENTSTART  -> (null : System.Object) 
  | COMMENTEND  -> (null : System.Object) 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; |]
let _fsyacc_action_rows = 2
let _fsyacc_actionTableElements = [|0us; 16385us; 0us; 49152us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 1us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 0us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; |]
let _fsyacc_reductions ()  =    [| 
# 279 "TigerParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 288 "TigerParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "../../../Tiger/Tiger.fsp"
                                                         "Nothing to see here" 
                   )
# 38 "../../../Tiger/Tiger.fsp"
                 : string));
|]
# 299 "TigerParser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 39;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : string =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
