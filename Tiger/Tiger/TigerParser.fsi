// Signature file for parser generated by fsyacc
module TigerParser
type token = 
  | EOF
  | LBracket
  | RBracket
  | LParen
  | RParen
  | Period
  | Colon
  | SemiColon
  | Comma
  | INT
  | ARRAY
  | TYPE
  | IF
  | THEN
  | ELSE
  | FOR
  | TO
  | DO
  | WHILE
  | FUNCTION
  | LET
  | IN
  | NIL
  | VAR
  | OF
  | END
  | EQUAL
  | LESS
  | LessEqual
  | Greater
  | GreaterEqual
  | Assign
  | Plus
  | Minus
  | Divide
  | Multiply
  | Exponent
  | And
  | Or
  | Comment of (string)
  | StringLiteral of (string)
  | Float of (float)
  | Int of (int)
  | ID of (string)
type tokenId = 
    | TOKEN_EOF
    | TOKEN_LBracket
    | TOKEN_RBracket
    | TOKEN_LParen
    | TOKEN_RParen
    | TOKEN_Period
    | TOKEN_Colon
    | TOKEN_SemiColon
    | TOKEN_Comma
    | TOKEN_INT
    | TOKEN_ARRAY
    | TOKEN_TYPE
    | TOKEN_IF
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_FOR
    | TOKEN_TO
    | TOKEN_DO
    | TOKEN_WHILE
    | TOKEN_FUNCTION
    | TOKEN_LET
    | TOKEN_IN
    | TOKEN_NIL
    | TOKEN_VAR
    | TOKEN_OF
    | TOKEN_END
    | TOKEN_EQUAL
    | TOKEN_LESS
    | TOKEN_LessEqual
    | TOKEN_Greater
    | TOKEN_GreaterEqual
    | TOKEN_Assign
    | TOKEN_Plus
    | TOKEN_Minus
    | TOKEN_Divide
    | TOKEN_Multiply
    | TOKEN_Exponent
    | TOKEN_And
    | TOKEN_Or
    | TOKEN_Comment
    | TOKEN_StringLiteral
    | TOKEN_Float
    | TOKEN_Int
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
/// This function maps integers indexes to symbolic token ids
val tagOfToken: token -> int

/// This function maps integers indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> (string) 
